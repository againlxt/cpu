// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ALUAdder(	// src/main/scala/exu/alu/ALU.scala:72:7
  input         io_subOrAdd,	// src/main/scala/exu/alu/ALU.scala:73:20
  input  [31:0] io_srcAData,	// src/main/scala/exu/alu/ALU.scala:73:20
                io_srcBData,	// src/main/scala/exu/alu/ALU.scala:73:20
  output        io_carry,	// src/main/scala/exu/alu/ALU.scala:73:20
                io_zero,	// src/main/scala/exu/alu/ALU.scala:73:20
                io_overflow,	// src/main/scala/exu/alu/ALU.scala:73:20
  output [31:0] io_result	// src/main/scala/exu/alu/ALU.scala:73:20
);

  wire [31:0] _cla32Add_io_sum;	// src/main/scala/exu/alu/ALU.scala:84:33
  CLAGen cla32Add (	// src/main/scala/exu/alu/ALU.scala:84:33
    .io_a    (io_srcAData),
    .io_b    (io_srcBData ^ {32{io_subOrAdd}}),	// src/main/scala/exu/alu/ALU.scala:85:30, :90:37
    .io_cin  (io_subOrAdd),
    .io_cout (io_carry),
    .io_sum  (_cla32Add_io_sum)
  );
  assign io_zero = _cla32Add_io_sum == 32'h0;	// src/main/scala/exu/alu/ALU.scala:72:7, :84:33, :93:56
  assign io_overflow =
    io_srcAData[31] == io_srcBData[31] & _cla32Add_io_sum[31] != io_srcAData[31];	// src/main/scala/exu/alu/ALU.scala:72:7, :84:33, :94:{45,50,62,68,87,92}
  assign io_result = _cla32Add_io_sum;	// src/main/scala/exu/alu/ALU.scala:72:7, :84:33
endmodule

