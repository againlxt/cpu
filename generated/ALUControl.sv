// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ALUControl(	// src/main/scala/exu/alu/ALUControl.scala:18:7
  input  [3:0] io_aluCtr,	// src/main/scala/exu/alu/ALUControl.scala:19:20
  output       io_aOrLCtr,	// src/main/scala/exu/alu/ALUControl.scala:19:20
               io_lOrRCtr,	// src/main/scala/exu/alu/ALUControl.scala:19:20
               io_uOrSCtr,	// src/main/scala/exu/alu/ALUControl.scala:19:20
               io_subOrAddCtr	// src/main/scala/exu/alu/ALUControl.scala:19:20
);

  wire [7:0][3:0] _GEN = '{4'h7, 4'h6, 4'h5, 4'h4, 4'h3, 4'h2, 4'h1, 4'h0};	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/alu/ALUControl.scala:29:33, :30:33, :31:33, :32:33, :33:33, :34:33, :35:33, :36:33
  wire [3:0]      aluCtrWire = _GEN[io_aluCtr[2:0]];	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/alu/ALUControl.scala:29:{27,33}, :30:33, :31:33, :32:33, :33:33, :34:33, :35:33, :36:33
  wire            _GEN_0 = aluCtrWire == 4'h0;	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/alu/ALUControl.scala:43:28
  wire            _GEN_1 = aluCtrWire == 4'h1;	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/alu/ALUControl.scala:43:28
  wire            _GEN_2 = aluCtrWire == 4'h2;	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/alu/ALUControl.scala:43:28
  assign io_aOrLCtr =
    ~(_GEN_0 | _GEN_1 | _GEN_2 | aluCtrWire == 4'h3 | aluCtrWire == 4'h4)
    & aluCtrWire == 4'h5 & io_aluCtr[3];	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/alu/ALUControl.scala:18:7, :43:28, :45:{39,52}, :58:41, :64:52, :77:41, :83:41
  assign io_lOrRCtr = ~_GEN_0 & _GEN_1;	// src/main/scala/exu/alu/ALUControl.scala:18:7, :43:28, :45:52
  assign io_uOrSCtr = ~(_GEN_0 | _GEN_1) & _GEN_2 & ~(io_aluCtr[3]);	// src/main/scala/exu/alu/ALUControl.scala:18:7, :43:28, :45:{39,52}, :60:41, :64:43
  assign io_subOrAddCtr = _GEN_0 ? io_aluCtr[3] : ~_GEN_1 & _GEN_2;	// src/main/scala/exu/alu/ALUControl.scala:18:7, :43:28, :45:{39,52}, :61:41
endmodule

