// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IDU(	// src/main/scala/idu/IDU.scala:9:7
  input  [31:0] io_cmd,	// src/main/scala/idu/IDU.scala:10:16
  output        io_regWR,	// src/main/scala/idu/IDU.scala:10:16
                io_srcAALU,	// src/main/scala/idu/IDU.scala:10:16
  output [1:0]  io_srcBALU,	// src/main/scala/idu/IDU.scala:10:16
  output [3:0]  io_ctrALU,	// src/main/scala/idu/IDU.scala:10:16
  output [2:0]  io_branch,	// src/main/scala/idu/IDU.scala:10:16
  output [4:0]  io_rs1Index,	// src/main/scala/idu/IDU.scala:10:16
                io_rs2Index,	// src/main/scala/idu/IDU.scala:10:16
                io_rdIndex,	// src/main/scala/idu/IDU.scala:10:16
  output [31:0] io_imm	// src/main/scala/idu/IDU.scala:10:16
);

  wire [2:0] _contrGen_io_immType;	// src/main/scala/idu/IDU.scala:51:33
  ContrGen contrGen (	// src/main/scala/idu/IDU.scala:51:33
    .io_cmd     (io_cmd),
    .io_opcode  (io_cmd[6:0]),	// src/main/scala/idu/IDU.scala:43:33
    .io_func3   (io_cmd[14:12]),	// src/main/scala/idu/IDU.scala:41:33
    .io_func7   (io_cmd[31:25]),	// src/main/scala/idu/IDU.scala:38:33
    .io_immType (_contrGen_io_immType),
    .io_regWR   (io_regWR),
    .io_srcAALU (io_srcAALU),
    .io_srcBALU (io_srcBALU),
    .io_ctrALU  (io_ctrALU),
    .io_branch  (io_branch)
  );
  ImmGen immGen (	// src/main/scala/idu/IDU.scala:69:33
    .io_iImm    (io_cmd[31:20]),	// src/main/scala/idu/IDU.scala:44:33
    .io_sImm    ({io_cmd[31:25], io_cmd[11:7]}),	// src/main/scala/idu/IDU.scala:38:33, :42:41, :45:30
    .io_bImm    ({io_cmd[31], io_cmd[7], io_cmd[30:25], io_cmd[11:8], 1'h0}),	// src/main/scala/idu/IDU.scala:46:{30,37,49,60,76}
    .io_uImm    ({io_cmd[31:12], 12'h0}),	// src/main/scala/idu/IDU.scala:47:{30,37}
    .io_jImm    ({io_cmd[31], io_cmd[19:12], io_cmd[20], io_cmd[30:21], 1'h0}),	// src/main/scala/idu/IDU.scala:46:{30,37}, :48:{30,49,65,77}
    .io_immType (_contrGen_io_immType),	// src/main/scala/idu/IDU.scala:51:33
    .io_imm     (io_imm)
  );
  assign io_rs1Index = io_cmd[19:15];	// src/main/scala/idu/IDU.scala:9:7, :40:41
  assign io_rs2Index = io_cmd[24:20];	// src/main/scala/idu/IDU.scala:9:7, :39:41
  assign io_rdIndex = io_cmd[11:7];	// src/main/scala/idu/IDU.scala:9:7, :42:41
endmodule

