// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IDU(	// src/main/scala/IDU.scala:9:7
  input         clock,	// src/main/scala/IDU.scala:9:7
                reset,	// src/main/scala/IDU.scala:9:7
  input  [4:0]  io_npcState,	// src/main/scala/IDU.scala:10:16
  input  [31:0] io_cmd,	// src/main/scala/IDU.scala:10:16
  output [31:0] io_insFormat,	// src/main/scala/IDU.scala:10:16
  output [2:0]  io_insType,	// src/main/scala/IDU.scala:10:16
  output [6:0]  io_func7,	// src/main/scala/IDU.scala:10:16
  output [4:0]  io_rs2,	// src/main/scala/IDU.scala:10:16
                io_rs1,	// src/main/scala/IDU.scala:10:16
  output [2:0]  io_func3,	// src/main/scala/IDU.scala:10:16
  output [4:0]  io_rd,	// src/main/scala/IDU.scala:10:16
  output [6:0]  io_opcode,	// src/main/scala/IDU.scala:10:16
  output [11:0] io_iImm,	// src/main/scala/IDU.scala:10:16
                io_sImm,	// src/main/scala/IDU.scala:10:16
  output [12:0] io_bImm,	// src/main/scala/IDU.scala:10:16
  output [31:0] io_uImm,	// src/main/scala/IDU.scala:10:16
  output [20:0] io_jImm	// src/main/scala/IDU.scala:10:16
);

  reg [31:0] insFormatReg;	// src/main/scala/IDU.scala:47:31
  reg [2:0]  insTypeReg;	// src/main/scala/IDU.scala:48:31
  reg [6:0]  func7Reg;	// src/main/scala/IDU.scala:51:28
  reg [4:0]  rs2Reg;	// src/main/scala/IDU.scala:52:28
  reg [4:0]  rs1Reg;	// src/main/scala/IDU.scala:53:28
  reg [2:0]  func3Reg;	// src/main/scala/IDU.scala:54:28
  reg [4:0]  rdReg;	// src/main/scala/IDU.scala:55:28
  reg [6:0]  opcodeReg;	// src/main/scala/IDU.scala:56:28
  reg [11:0] iImmReg;	// src/main/scala/IDU.scala:57:28
  reg [11:0] sImmReg;	// src/main/scala/IDU.scala:58:28
  reg [12:0] bImmReg;	// src/main/scala/IDU.scala:59:28
  reg [31:0] uImmReg;	// src/main/scala/IDU.scala:60:28
  reg [20:0] jImmReg;	// src/main/scala/IDU.scala:61:28
  always @(posedge clock) begin	// src/main/scala/IDU.scala:9:7
    if (reset) begin	// src/main/scala/IDU.scala:9:7
      insFormatReg <= 32'h0;	// src/main/scala/IDU.scala:47:31
      insTypeReg <= 3'h6;	// src/main/scala/IDU.scala:9:7, :48:31
      func7Reg <= 7'h0;	// src/main/scala/IDU.scala:51:28
      rs2Reg <= 5'h0;	// src/main/scala/IDU.scala:52:28
      rs1Reg <= 5'h0;	// src/main/scala/IDU.scala:52:28, :53:28
      func3Reg <= 3'h0;	// src/main/scala/IDU.scala:9:7, :54:28
      rdReg <= 5'h0;	// src/main/scala/IDU.scala:52:28, :55:28
      opcodeReg <= 7'h0;	// src/main/scala/IDU.scala:51:28, :56:28
      iImmReg <= 12'h0;	// src/main/scala/IDU.scala:44:25, :57:28
      sImmReg <= 12'h0;	// src/main/scala/IDU.scala:44:25, :58:28
      bImmReg <= 13'h0;	// src/main/scala/IDU.scala:59:28
      uImmReg <= 32'h0;	// src/main/scala/IDU.scala:47:31, :60:28
      jImmReg <= 21'h0;	// src/main/scala/IDU.scala:61:28
    end
    else begin	// src/main/scala/IDU.scala:9:7
      automatic logic _GEN = io_npcState == 5'h0;	// src/main/scala/IDU.scala:52:28, :73:22
      automatic logic _GEN_0;	// src/main/scala/IDU.scala:88:32
      _GEN_0 = io_npcState == 5'h4;	// src/main/scala/IDU.scala:88:32
      if (_GEN) begin	// src/main/scala/IDU.scala:73:22
        automatic logic _instructionTypeWire_T_1 = io_cmd[31:25] == 7'h0;	// src/main/scala/IDU.scala:35:28, :51:28, :64:28
        automatic logic _instructionTypeWire_T_7 = io_cmd[14:12] == 3'h0;	// src/main/scala/IDU.scala:9:7, :38:28, :64:58
        automatic logic _instructionTypeWire_T_4 = io_cmd[6:0] == 7'h33;	// src/main/scala/IDU.scala:40:28, :64:85
        automatic logic _instructionTypeWire_T_8 = io_cmd[6:0] == 7'h13;	// src/main/scala/IDU.scala:40:28, :65:55
        insFormatReg <=
          {30'h0,
           _instructionTypeWire_T_1 & _instructionTypeWire_T_7 & _instructionTypeWire_T_4
             ? 2'h0
             : _instructionTypeWire_T_7 & _instructionTypeWire_T_8 ? 2'h1 : 2'h2};	// src/main/scala/IDU.scala:47:31, :63:63, :64:{28,58,71,85}, :65:{41,55}, :74:30, src/main/scala/chisel3/util/Mux.scala:126:16
        insTypeReg <=
          _instructionTypeWire_T_1 & _instructionTypeWire_T_7 & _instructionTypeWire_T_4
            ? 3'h0
            : _instructionTypeWire_T_7 & _instructionTypeWire_T_8 ? 3'h1 : 3'h6;	// src/main/scala/IDU.scala:9:7, :48:31, :64:{28,58,85}, :65:55, :69:71, :70:41, src/main/scala/chisel3/util/Mux.scala:126:16
        func7Reg <= io_cmd[31:25];	// src/main/scala/IDU.scala:35:28, :51:28
        rs2Reg <= io_cmd[24:20];	// src/main/scala/IDU.scala:36:28, :52:28
        rs1Reg <= io_cmd[19:15];	// src/main/scala/IDU.scala:37:28, :53:28
        func3Reg <= io_cmd[14:12];	// src/main/scala/IDU.scala:38:28, :54:28
        rdReg <= io_cmd[11:7];	// src/main/scala/IDU.scala:39:28, :55:28
        opcodeReg <= io_cmd[6:0];	// src/main/scala/IDU.scala:40:28, :56:28
        iImmReg <= io_cmd[31:20];	// src/main/scala/IDU.scala:41:28, :57:28
        bImmReg <= {io_cmd[31], io_cmd[7], io_cmd[30:25], io_cmd[11:8], 1'h0};	// src/main/scala/IDU.scala:43:{25,32,44,55,71}, :59:28
        uImmReg <= {io_cmd[31:12], 12'h0};	// src/main/scala/IDU.scala:44:{25,32}, :60:28
        jImmReg <= {io_cmd[31], io_cmd[19:12], io_cmd[20], io_cmd[30:21], 1'h0};	// src/main/scala/IDU.scala:43:{25,32}, :45:{25,44,60,72}, :61:28
      end
      else if (~_GEN_0) begin	// src/main/scala/IDU.scala:88:32
        func7Reg <= 7'h0;	// src/main/scala/IDU.scala:51:28
        rs2Reg <= 5'h0;	// src/main/scala/IDU.scala:52:28
        rs1Reg <= 5'h0;	// src/main/scala/IDU.scala:52:28, :53:28
        func3Reg <= 3'h0;	// src/main/scala/IDU.scala:9:7, :54:28
        rdReg <= 5'h0;	// src/main/scala/IDU.scala:52:28, :55:28
        opcodeReg <= 7'h0;	// src/main/scala/IDU.scala:51:28, :56:28
        iImmReg <= 12'h0;	// src/main/scala/IDU.scala:44:25, :57:28
        bImmReg <= 13'h0;	// src/main/scala/IDU.scala:59:28
        uImmReg <= 32'h0;	// src/main/scala/IDU.scala:47:31, :60:28
        jImmReg <= 21'h0;	// src/main/scala/IDU.scala:61:28
      end
      sImmReg <= _GEN ? {io_cmd[31:25], io_cmd[11:7]} : _GEN_0 ? bImmReg[11:0] : 12'h0;	// src/main/scala/IDU.scala:35:28, :39:28, :42:25, :44:25, :58:28, :59:28, :73:{22,51}, :84:30, :88:{32,58}, :97:27, :109:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/IDU.scala:9:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/IDU.scala:9:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/IDU.scala:9:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/IDU.scala:9:7
      automatic logic [31:0] _RANDOM[0:5];	// src/main/scala/IDU.scala:9:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/IDU.scala:9:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/IDU.scala:9:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/IDU.scala:9:7
        for (logic [2:0] i = 3'h0; i < 3'h6; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/IDU.scala:9:7
        end	// src/main/scala/IDU.scala:9:7
        insFormatReg = _RANDOM[3'h0];	// src/main/scala/IDU.scala:9:7, :47:31
        insTypeReg = _RANDOM[3'h1][2:0];	// src/main/scala/IDU.scala:9:7, :48:31
        func7Reg = _RANDOM[3'h2][9:3];	// src/main/scala/IDU.scala:9:7, :51:28
        rs2Reg = _RANDOM[3'h2][14:10];	// src/main/scala/IDU.scala:9:7, :51:28, :52:28
        rs1Reg = _RANDOM[3'h2][19:15];	// src/main/scala/IDU.scala:9:7, :51:28, :53:28
        func3Reg = _RANDOM[3'h2][22:20];	// src/main/scala/IDU.scala:9:7, :51:28, :54:28
        rdReg = _RANDOM[3'h2][27:23];	// src/main/scala/IDU.scala:9:7, :51:28, :55:28
        opcodeReg = {_RANDOM[3'h2][31:28], _RANDOM[3'h3][2:0]};	// src/main/scala/IDU.scala:9:7, :51:28, :56:28
        iImmReg = _RANDOM[3'h3][14:3];	// src/main/scala/IDU.scala:9:7, :56:28, :57:28
        sImmReg = _RANDOM[3'h3][26:15];	// src/main/scala/IDU.scala:9:7, :56:28, :58:28
        bImmReg = {_RANDOM[3'h3][31:27], _RANDOM[3'h4][7:0]};	// src/main/scala/IDU.scala:9:7, :56:28, :59:28
        uImmReg = {_RANDOM[3'h4][31:8], _RANDOM[3'h5][7:0]};	// src/main/scala/IDU.scala:9:7, :59:28, :60:28
        jImmReg = _RANDOM[3'h5][28:8];	// src/main/scala/IDU.scala:9:7, :60:28, :61:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/IDU.scala:9:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/IDU.scala:9:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_insFormat = insFormatReg;	// src/main/scala/IDU.scala:9:7, :47:31
  assign io_insType = insTypeReg;	// src/main/scala/IDU.scala:9:7, :48:31
  assign io_func7 = func7Reg;	// src/main/scala/IDU.scala:9:7, :51:28
  assign io_rs2 = rs2Reg;	// src/main/scala/IDU.scala:9:7, :52:28
  assign io_rs1 = rs1Reg;	// src/main/scala/IDU.scala:9:7, :53:28
  assign io_func3 = func3Reg;	// src/main/scala/IDU.scala:9:7, :54:28
  assign io_rd = rdReg;	// src/main/scala/IDU.scala:9:7, :55:28
  assign io_opcode = opcodeReg;	// src/main/scala/IDU.scala:9:7, :56:28
  assign io_iImm = iImmReg;	// src/main/scala/IDU.scala:9:7, :57:28
  assign io_sImm = sImmReg;	// src/main/scala/IDU.scala:9:7, :58:28
  assign io_bImm = bImmReg;	// src/main/scala/IDU.scala:9:7, :59:28
  assign io_uImm = uImmReg;	// src/main/scala/IDU.scala:9:7, :60:28
  assign io_jImm = jImmReg;	// src/main/scala/IDU.scala:9:7, :61:28
endmodule

