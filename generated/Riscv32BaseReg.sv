// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Riscv32BaseReg(	// src/main/scala/Riscv32BaseReg.scala:7:7
  input         clock,	// src/main/scala/Riscv32BaseReg.scala:7:7
                reset,	// src/main/scala/Riscv32BaseReg.scala:7:7
  input  [3:0]  io_rs1Index,	// src/main/scala/Riscv32BaseReg.scala:8:20
                io_rs2Index,	// src/main/scala/Riscv32BaseReg.scala:8:20
                io_rdIndex,	// src/main/scala/Riscv32BaseReg.scala:8:20
  input  [31:0] io_dataIn,	// src/main/scala/Riscv32BaseReg.scala:8:20
  input         io_regWR,	// src/main/scala/Riscv32BaseReg.scala:8:20
  output [31:0] io_rs1Data,	// src/main/scala/Riscv32BaseReg.scala:8:20
                io_rs2Data	// src/main/scala/Riscv32BaseReg.scala:8:20
);

  reg  [31:0]       riscv32BaseReg_0;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_1;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_2;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_3;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_4;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_5;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_6;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_7;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_8;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_9;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_10;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_11;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_12;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_13;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_14;	// src/main/scala/Riscv32BaseReg.scala:19:42
  reg  [31:0]       riscv32BaseReg_15;	// src/main/scala/Riscv32BaseReg.scala:19:42
  wire [15:0][31:0] _GEN =
    {{riscv32BaseReg_15},
     {riscv32BaseReg_14},
     {riscv32BaseReg_13},
     {riscv32BaseReg_12},
     {riscv32BaseReg_11},
     {riscv32BaseReg_10},
     {riscv32BaseReg_9},
     {riscv32BaseReg_8},
     {riscv32BaseReg_7},
     {riscv32BaseReg_6},
     {riscv32BaseReg_5},
     {riscv32BaseReg_4},
     {riscv32BaseReg_3},
     {riscv32BaseReg_2},
     {riscv32BaseReg_1},
     {riscv32BaseReg_0}};	// src/main/scala/Riscv32BaseReg.scala:19:42, :24:44
  always @(posedge clock) begin	// src/main/scala/Riscv32BaseReg.scala:7:7
    if (reset) begin	// src/main/scala/Riscv32BaseReg.scala:7:7
      riscv32BaseReg_0 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_1 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_2 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_3 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_4 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_5 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_6 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_7 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_8 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_9 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_10 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_11 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_12 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_13 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_14 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
      riscv32BaseReg_15 <= 32'h0;	// src/main/scala/Riscv32BaseReg.scala:19:{42,50}
    end
    else begin	// src/main/scala/Riscv32BaseReg.scala:7:7
      automatic logic [31:0] _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      _GEN_0 = io_regWR ? io_dataIn : _GEN[io_rdIndex];	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h0)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_0 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h1)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_1 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h2)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_2 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h3)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_3 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h4)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_4 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h5)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_5 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h6)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_6 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h7)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_7 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h8)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_8 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'h9)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_9 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'hA)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_10 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'hB)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_11 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'hC)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_12 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'hD)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_13 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (io_rdIndex == 4'hE)	// src/main/scala/Riscv32BaseReg.scala:7:7, :22:49
        riscv32BaseReg_14 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
      if (&io_rdIndex)	// src/main/scala/Riscv32BaseReg.scala:22:49
        riscv32BaseReg_15 <= _GEN_0;	// src/main/scala/Riscv32BaseReg.scala:19:42, :22:49, :24:44
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/Riscv32BaseReg.scala:7:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/Riscv32BaseReg.scala:7:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/Riscv32BaseReg.scala:7:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/Riscv32BaseReg.scala:7:7
      automatic logic [31:0] _RANDOM[0:15];	// src/main/scala/Riscv32BaseReg.scala:7:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/Riscv32BaseReg.scala:7:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/Riscv32BaseReg.scala:7:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/Riscv32BaseReg.scala:7:7
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          _RANDOM[i[3:0]] = `RANDOM;	// src/main/scala/Riscv32BaseReg.scala:7:7
        end	// src/main/scala/Riscv32BaseReg.scala:7:7
        riscv32BaseReg_0 = _RANDOM[4'h0];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_1 = _RANDOM[4'h1];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_2 = _RANDOM[4'h2];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_3 = _RANDOM[4'h3];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_4 = _RANDOM[4'h4];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_5 = _RANDOM[4'h5];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_6 = _RANDOM[4'h6];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_7 = _RANDOM[4'h7];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_8 = _RANDOM[4'h8];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_9 = _RANDOM[4'h9];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_10 = _RANDOM[4'hA];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_11 = _RANDOM[4'hB];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_12 = _RANDOM[4'hC];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_13 = _RANDOM[4'hD];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_14 = _RANDOM[4'hE];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
        riscv32BaseReg_15 = _RANDOM[4'hF];	// src/main/scala/Riscv32BaseReg.scala:7:7, :19:42
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/Riscv32BaseReg.scala:7:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/Riscv32BaseReg.scala:7:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rs1Data = _GEN[io_rs1Index];	// src/main/scala/Riscv32BaseReg.scala:7:7, :24:44, :27:25
  assign io_rs2Data = _GEN[io_rs2Index];	// src/main/scala/Riscv32BaseReg.scala:7:7, :24:44, :28:25
endmodule

