// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module BranchCond(	// src/main/scala/exu/EXU.scala:135:7
  input  [2:0] io_branch,	// src/main/scala/exu/EXU.scala:136:20
  input        io_less,	// src/main/scala/exu/EXU.scala:136:20
               io_zero,	// src/main/scala/exu/EXU.scala:136:20
  output       io_pcASrc,	// src/main/scala/exu/EXU.scala:136:20
               io_pcBSrc	// src/main/scala/exu/EXU.scala:136:20
);

  wire _io_pcBSrc_T = io_branch == 3'h0;	// src/main/scala/exu/EXU.scala:152:29
  wire _io_pcBSrc_T_1 = io_branch == 3'h1;	// src/main/scala/exu/EXU.scala:153:29
  wire _io_pcBSrc_T_31 = io_branch == 3'h2;	// src/main/scala/exu/EXU.scala:154:29
  wire _io_pcBSrc_T_6 = io_branch == 3'h4;	// src/main/scala/exu/EXU.scala:155:29
  wire _io_pcBSrc_T_11 = io_branch == 3'h5;	// src/main/scala/exu/EXU.scala:157:29
  wire _io_pcBSrc_T_16 = io_branch == 3'h6;	// src/main/scala/exu/EXU.scala:159:29
  assign io_pcASrc =
    ~_io_pcBSrc_T
    & (_io_pcBSrc_T_1 | _io_pcBSrc_T_31 | ~(_io_pcBSrc_T_6 & ~io_zero)
       & (_io_pcBSrc_T_6 & io_zero | _io_pcBSrc_T_11 & ~io_zero
          | ~(_io_pcBSrc_T_11 & io_zero | _io_pcBSrc_T_16 & ~io_less)
          & (_io_pcBSrc_T_16 & io_less | (&io_branch) & ~io_less)));	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/EXU.scala:135:7, :152:29, :153:29, :154:29, :155:{29,42,44}, :156:42, :157:{29,42}, :158:42, :159:{29,42,44}, :160:42, :161:{29,42}
  assign io_pcBSrc = ~(_io_pcBSrc_T | _io_pcBSrc_T_1) & _io_pcBSrc_T_31;	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/EXU.scala:135:7, :152:29, :153:29, :154:29
endmodule

