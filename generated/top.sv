// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module top(	// src/main/scala/Main.scala:38:7
  input         clock,	// src/main/scala/Main.scala:38:7
                reset,	// src/main/scala/Main.scala:38:7
  input  [2:0]  io_npcState,	// src/main/scala/Main.scala:39:20
  input  [31:0] io_memData,	// src/main/scala/Main.scala:39:20
  output [31:0] io_curPC,	// src/main/scala/Main.scala:39:20
                io_nextPC	// src/main/scala/Main.scala:39:20
);

  wire [31:0] _exu_io_nextPC;	// src/main/scala/Main.scala:49:49
  wire [31:0] _exu_io_rdData;	// src/main/scala/Main.scala:49:49
  wire        _idu_io_regWR;	// src/main/scala/Main.scala:48:49
  wire        _idu_io_srcAALU;	// src/main/scala/Main.scala:48:49
  wire [1:0]  _idu_io_srcBALU;	// src/main/scala/Main.scala:48:49
  wire [3:0]  _idu_io_ctrALU;	// src/main/scala/Main.scala:48:49
  wire [2:0]  _idu_io_branch;	// src/main/scala/Main.scala:48:49
  wire        _idu_io_memToReg;	// src/main/scala/Main.scala:48:49
  wire        _idu_io_memWR;	// src/main/scala/Main.scala:48:49
  wire        _idu_io_memValid;	// src/main/scala/Main.scala:48:49
  wire [2:0]  _idu_io_memOP;	// src/main/scala/Main.scala:48:49
  wire [4:0]  _idu_io_rs1Index;	// src/main/scala/Main.scala:48:49
  wire [4:0]  _idu_io_rs2Index;	// src/main/scala/Main.scala:48:49
  wire [4:0]  _idu_io_rdIndex;	// src/main/scala/Main.scala:48:49
  wire [31:0] _idu_io_imm;	// src/main/scala/Main.scala:48:49
  wire [31:0] _riscv32BaseReg_io_rs1Data;	// src/main/scala/Main.scala:47:41
  wire [31:0] _riscv32BaseReg_io_rs2Data;	// src/main/scala/Main.scala:47:41
  wire [31:0] _ifu_io_cmd;	// src/main/scala/Main.scala:46:49
  wire [31:0] _pc_io_pc;	// src/main/scala/Main.scala:45:49
  PC pc (	// src/main/scala/Main.scala:45:49
    .clock       (clock),
    .reset       (reset),
    .io_npcState ({29'h0, io_npcState}),	// src/main/scala/Main.scala:53:25
    .io_dnpc     (_exu_io_nextPC),	// src/main/scala/Main.scala:49:49
    .io_pc       (_pc_io_pc)
  );
  IFU ifu (	// src/main/scala/Main.scala:46:49
    .io_memData (io_memData),
    .io_cmd     (_ifu_io_cmd)
  );
  Riscv32BaseReg riscv32BaseReg (	// src/main/scala/Main.scala:47:41
    .clock       (clock),
    .reset       (reset),
    .io_rs1Index (_idu_io_rs1Index[3:0]),	// src/main/scala/Main.scala:48:49, :90:41
    .io_rs2Index (_idu_io_rs2Index[3:0]),	// src/main/scala/Main.scala:48:49, :91:41
    .io_rdIndex  (_idu_io_rdIndex[3:0]),	// src/main/scala/Main.scala:48:49, :92:41
    .io_dataIn   (_exu_io_rdData),	// src/main/scala/Main.scala:49:49
    .io_regWR    (_idu_io_regWR),	// src/main/scala/Main.scala:48:49
    .io_rs1Data  (_riscv32BaseReg_io_rs1Data),
    .io_rs2Data  (_riscv32BaseReg_io_rs2Data)
  );
  IDU idu (	// src/main/scala/Main.scala:48:49
    .io_cmd      (_ifu_io_cmd),	// src/main/scala/Main.scala:46:49
    .io_regWR    (_idu_io_regWR),
    .io_srcAALU  (_idu_io_srcAALU),
    .io_srcBALU  (_idu_io_srcBALU),
    .io_ctrALU   (_idu_io_ctrALU),
    .io_branch   (_idu_io_branch),
    .io_memToReg (_idu_io_memToReg),
    .io_memWR    (_idu_io_memWR),
    .io_memValid (_idu_io_memValid),
    .io_memOP    (_idu_io_memOP),
    .io_rs1Index (_idu_io_rs1Index),
    .io_rs2Index (_idu_io_rs2Index),
    .io_rdIndex  (_idu_io_rdIndex),
    .io_imm      (_idu_io_imm)
  );
  EXU exu (	// src/main/scala/Main.scala:49:49
    .io_rs1Data     (_riscv32BaseReg_io_rs1Data),	// src/main/scala/Main.scala:47:41
    .io_rs2Data     (_riscv32BaseReg_io_rs2Data),	// src/main/scala/Main.scala:47:41
    .io_immData     (_idu_io_imm),	// src/main/scala/Main.scala:48:49
    .io_pc          (_pc_io_pc),	// src/main/scala/Main.scala:45:49
    .io_aluASrcCtr  (_idu_io_srcAALU),	// src/main/scala/Main.scala:48:49
    .io_aluBSrcCtr  (_idu_io_srcBALU),	// src/main/scala/Main.scala:48:49
    .io_aluCtr      (_idu_io_ctrALU),	// src/main/scala/Main.scala:48:49
    .io_memOPCtr    (_idu_io_memOP),	// src/main/scala/Main.scala:48:49
    .io_memWRCtr    (_idu_io_memWR),	// src/main/scala/Main.scala:48:49
    .io_memValidCtr (_idu_io_memValid),	// src/main/scala/Main.scala:48:49
    .io_branchCtr   (_idu_io_branch),	// src/main/scala/Main.scala:48:49
    .io_memToRegCtr (_idu_io_memToReg),	// src/main/scala/Main.scala:48:49
    .io_nextPC      (_exu_io_nextPC),
    .io_rdData      (_exu_io_rdData)
  );
  assign io_curPC = _pc_io_pc;	// src/main/scala/Main.scala:38:7, :45:49
  assign io_nextPC = _exu_io_nextPC;	// src/main/scala/Main.scala:38:7, :49:49
endmodule

