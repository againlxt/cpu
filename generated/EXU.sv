// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module EXU(	// src/main/scala/exu/EXU.scala:13:7
  input  [31:0] io_rs1Data,	// src/main/scala/exu/EXU.scala:14:20
                io_rs2Data,	// src/main/scala/exu/EXU.scala:14:20
                io_immData,	// src/main/scala/exu/EXU.scala:14:20
                io_pc,	// src/main/scala/exu/EXU.scala:14:20
  input         io_aluASrcCtr,	// src/main/scala/exu/EXU.scala:14:20
  input  [1:0]  io_aluBSrcCtr,	// src/main/scala/exu/EXU.scala:14:20
  input  [3:0]  io_aluCtr,	// src/main/scala/exu/EXU.scala:14:20
  input  [2:0]  io_memOPCtr,	// src/main/scala/exu/EXU.scala:14:20
  input         io_memWRCtr,	// src/main/scala/exu/EXU.scala:14:20
                io_memValidCtr,	// src/main/scala/exu/EXU.scala:14:20
  input  [2:0]  io_branchCtr,	// src/main/scala/exu/EXU.scala:14:20
  output [31:0] io_nextPC,	// src/main/scala/exu/EXU.scala:14:20
                io_rdData	// src/main/scala/exu/EXU.scala:14:20
);

  wire        _branchCond_io_pcASrc;	// src/main/scala/exu/EXU.scala:69:41
  wire        _branchCond_io_pcBSrc;	// src/main/scala/exu/EXU.scala:69:41
  wire        _alu_io_less;	// src/main/scala/exu/EXU.scala:58:25
  wire        _alu_io_zero;	// src/main/scala/exu/EXU.scala:58:25
  wire [31:0] _alu_io_aluOut;	// src/main/scala/exu/EXU.scala:58:25
  ALU alu (	// src/main/scala/exu/EXU.scala:58:25
    .io_aluCtr   (io_aluCtr),
    .io_srcAData (io_aluASrcCtr ? io_pc : io_rs1Data),	// src/main/scala/exu/EXU.scala:52:38
    .io_srcBData
      (io_aluBSrcCtr == 2'h0
         ? io_rs2Data
         : io_aluBSrcCtr == 2'h1 ? io_immData : {29'h0, io_aluBSrcCtr == 2'h2, 2'h0}),	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/EXU.scala:54:33, :55:33, :56:33
    .io_less     (_alu_io_less),
    .io_zero     (_alu_io_zero),
    .io_aluOut   (_alu_io_aluOut)
  );
  BranchCond branchCond (	// src/main/scala/exu/EXU.scala:69:41
    .io_branch (io_branchCtr),
    .io_less   (_alu_io_less),	// src/main/scala/exu/EXU.scala:58:25
    .io_zero   (_alu_io_zero),	// src/main/scala/exu/EXU.scala:58:25
    .io_pcASrc (_branchCond_io_pcASrc),
    .io_pcBSrc (_branchCond_io_pcBSrc)
  );
  DataMem dataMem (	// src/main/scala/exu/EXU.scala:79:41
    .io_addr   (_alu_io_aluOut),	// src/main/scala/exu/EXU.scala:58:25
    .io_memOP  (io_memOPCtr),
    .io_dataIn (io_rs2Data),
    .io_wrEn   (io_memWRCtr),
    .io_valid  (io_memValidCtr)
  );
  assign io_nextPC =
    (_branchCond_io_pcASrc ? io_immData : 32'h4)
    + (_branchCond_io_pcBSrc ? io_rs1Data : io_pc);	// src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/exu/EXU.scala:13:7, :69:41, :90:{31,69}, :91:12
  assign io_rdData = _alu_io_aluOut;	// src/main/scala/exu/EXU.scala:13:7, :58:25
endmodule

